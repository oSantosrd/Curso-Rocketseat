.container {
  width: 100%;
  max-width: 35rem;
  margin: 0 auto;

  display: grid;
  gap: 2.5rem;
}

.main-title {
  color: map-get($colors, pink);
  font-family: $font-leckerli;
  font-size: 2.5rem;
  text-transform: capitalize;
}

.title-lg {
  color: $text-heading;
  font-family: $font-baloo;
  font-size: 1.75rem;
  font-weight: 700;
}

.text-sm {
  color: $text-body;
  font-size: 1rem;
  font-weight: 300;
}

.link {
  color: $brand-light;
  text-decoration: underline;
}

.btn-primary {
  padding: .25rem 1.25rem;
  color: #fff;
  display: flex;
  align-items: center;
  gap: .75rem;
  background-color: $brand-dark;
  outline: none;
  border: none;
  border-radius: .5rem;
  cursor: pointer;
  transition: background-color .2s;

  &:hover {
    background-color: $brand-mid;
  }
} 

.form-control {
  display: grid;
  gap: 3rem;

  fieldset {
    border: none;

    & > *:not(:last-child) {
      margin-bottom: 1rem;
    }
  }

  legend {
    color: $text-heading;
    font-family: $font-baloo;
    font-size: 1.125rem;
    font-weight: 700;

    display: flex;
    align-items: center;
    gap: .75rem;
  }

  [class*="-wrapper"] {
    display: grid;
    gap: .75rem;

    label {
      color: $text-body;
      font-size: .875rem;
    }
  }

  .input-wrapper { 
    [class$="-control"] {
      appearance: none; 

      width: 100%;
      height: 3rem;
      padding: .8rem 1rem;
      font-size: 1rem;
      background: $input-base;
      border: 1px solid $input-stroke;
      border-radius: .5rem;
      outline: none;
      color: $text-body;

      &::placeholder {
        color: $input-placeholder;
      }

      &:active, 
      &:focus {
        border-color: $brand-light;
      }
    }

    .datetime-control {
      position: relative;

      &::-webkit-calendar-picker-indicator {
        opacity: 0;
        z-index: 1;
        cursor: pointer;
      }

      &::before {
        content: '';
        background: url(../images/icons/calendar.svg) center/contain;
        position: absolute;
        right: 1rem;
        width: 1.25rem;
        height: 1.25rem;
        top: 50%;
        transform: translateY(-50%);
      }
    }

    .textarea-control {
      min-height: 3rem;
      max-height: 20rem;
      resize: vertical;
    }
  }

  .radio-wrapper {
    .radio-inner {
      $spacer: .25rem;
      width: 100%;
      height: 3rem;
      background-color: $input-base;
      display: flex;
      gap: $spacer;
      padding: $spacer;
      border: 1px solid $input-stroke;
      border-radius: .5rem;
      position: relative;

      .checked-indicator {
        position: absolute;
        top: 0;
        left: 0;
        margin: $spacer;
        width: calc(50% - ($spacer + $spacer / 2));
        height: calc(100% - $spacer * 2);
        border-radius: $spacer;
        background: $shape-button;
        transform: translateX(0);
        transition: transform .2s ease-in-out;
      }
              
      &:has(#online:checked) .checked-indicator {
        transform: translateX(calc(100% + $spacer));
      }

      .input-wrapper {
        all: unset;
        flex: 1;
        display: grid;
        place-items: center;
        position: relative;

        label {
          cursor: pointer;
          position: absolute;
          display: flex;
          align-items: center;
          gap: .5rem;
          color: $text-body;
          font-size: .875rem;
          transition: color .2s, font-weight .05s;

          svg {
            color: $input-placeholder;
            transition: color .2s;
          }
        }

        .radio-control {
          all: unset;
          cursor: pointer;
          width: 100%;
          height: 100%;
          border-radius: .25rem;
          transition: background-color .2s;
        }

        &:has(:hover, :checked) {
          label {
            color: $text-heading;
            font-weight: 500;

            svg {
              color: $brand-light;
            }
          }
        }
      }
    }
  }

  .color-preference-wrapper {
    width: 100%;
    margin-bottom: .75rem;
    gap: 1rem;

    .color-preference-inner {
      display: flex;
      flex-wrap: wrap;
      gap: .75rem;
    }
  }

  .theme-grid-wrapper {
    gap: 1rem;
    margin-bottom: .75rem;

    .theme-grid-inner {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;

      .card-theme {
        flex: 1 1 clamp(8rem, 8.2rem, 8.5rem);
        max-width: 100%;
        padding: .25rem .25rem .5rem;

        background-color: $shape-button;
        border: 1px solid $input-stroke;
        border-radius: .5rem;

        color: $text-heading;
        text-align: center;
        font-size: .875rem;

        display: grid;
        gap: .5rem;

        position: relative;
        transition: border-color .2s;

        input {
          all: unset;
          appearance: none;
          position: absolute;
          inset: 0;
          border: 1px solid transparent;
          border-radius: calc(.5rem - 1px);
          transition: border-color .2s;
          cursor: pointer;
        }

        &:has(:checked) {
          border-color: $brand-light;

          input {
            border-color: $brand-light;
          }
        }

        img {
          width: 100%;
          aspect-ratio: 2/1;
          object-fit: cover;
          border-radius: .25rem;
        }
      }
    }
  }

  .switch-wrapper {
    .switch-inner {
      display: flex;
      align-items: center;
      gap: .75rem;

      .switch-control {
        all: unset;
        appearance: none;
        background-color: $input-base;
        background-image: url('data:image/svg+xml;charset=UTF-8, <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="12" fill="%23363B40"/></svg>');
        background-position: calc(0% + .25rem) center;
        background-size: 1.5rem;
        background-repeat: no-repeat;
        width: 4rem;
        height: 2rem;
        border: 1px solid $input-stroke;
        border-radius: 2rem;
        transition: .2s;

        &:checked {
          background-color: $brand-light;  
          background-image: url('data:image/svg+xml;charset=UTF-8, <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="12" cy="12" r="12" fill="%23FFFFFF"/></svg>');
          background-position-x: calc(100% - .25rem);
        }
      }
    }
  }

  .input-file-wrapper {
    .input-file-inner {
      display: flex;
      align-items: center;
      gap: .75rem;

      .input-file-button {
        cursor: pointer;
        height: 2.5rem;
        display: flex;
        align-items: center;
        gap: .5rem;
        padding: .25rem .75rem;
        background-color: $shape-button;
        border-radius: .5rem;
        font-weight: 500;
        transition: background-color .2s;

        &:hover {
          background-color: $shape-hover;
        }
      }
    }
  }

  .checkbox-wrapper {
    display: flex;
    align-items: center;

    .checkbox-control {
      all: unset;
      appearance: none;

      background-color: $input-base;
      width: 1.25rem;
      height: 1.25rem;

      border: 1px solid $input-stroke;
      border-radius: .25rem;

      &:checked {
        border-color: $brand-light;    
        background: $input-base url(../images/icons/check.svg) center/contain no-repeat;    
      }
    }
  }
}

@each $id, $color in $colors {
  input[type="radio"]##{$id} {
    appearance: none; 

    width: 2.5rem;
    height: 2.5rem;
    background-color: $color;
    border: 6px solid $shape-button;
    border-radius: 50%; 

    display: grid;
    place-items: center;
    position: relative;

    cursor: pointer;

    &::before {
      content: '';
      display: block;
      position: absolute;
      width: calc(2.5rem - 2 * 2px);
      height: calc(2.5rem - 2 * 2px);
      border-radius: 50%;
      border: 2px solid transparent;
      transition: .2s;
    }

    &:checked::before {
      border-color: $color;
    }
  }
}

.flex {
  $gap: 1rem;
  display: flex;
  flex-wrap: wrap;
  gap: $gap;

  @for $i from 1 through 12 {
    $numcols: 12 / $i;
    $spacers: ($gap * ($numcols - 1)) / $numcols;

    .col-#{$i} {
      flex: 0 0 calc((100% / $numcols) - $spacers);
    }
  }
}